library(swirl)
swirl
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
5+7
X <- 5+7
X <- 5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my-div
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
play()
ls()
nxt()
ls()
list.files()
?list.files()
?list.files
list.files(recurssive=TRUE)
list.files(recursive=TRUE)
args(list.files)
old.dir <- getwd()
mkdir(testdir)
mkdir()
dir.create
dir.create("testdir")
setwd("testdir")
?dir.create
file.create("myTest.R")
file.create("mytest.R")
ls()
list.files()
file.exists(mytest.R)
file.exists("myTest.R)
file.exists("myTest.R")
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?path
ls("mytest3.R")
file.info("mytest3.R")
file.path("mytest3.R")
dir.create(testdir2/testdir3)
?dir.create
dir.create(testdir2/testdir3, recursive=TRUE)
dir.create("testdir2/testdir3", recursive=TRUE)
dir.delete("testdir2")
unlink("testdir2")
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
quit()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv,strstringsAsFactors = FALSE)
read.csv(path2csv,stringsAsFactors = FALSE)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,
| country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,
| -time)
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "
IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
group_by(cran,X)
group_by(cran,package)
by_package <- group_by(cran,package)
by_package
summary(by_package, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arracnge(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs
| = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique ,_ filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
cran %>%select() %>%print
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
?gather
res <- gather(students2, sex_class, count, -grade)
res
?separate
seprate(res, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
students3$class
students3$Class
students3$class
header(students3)
head(students3)
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
bind_rows(passed, failed)
packageVersion('dplyr')
update.packages(dplyr)
update.packages("dplyr")
packageVersion('dplyr')
update.packages("dplyr")
?update.packages
old.packages()
update.packages()
y
update.packages("dplyr")
update.packages()
swirl()
library(swirl)
library("swirl")
install.packages("RCurl")
library("swirl")
install.packages("digest")
library("swirl")
install.packages("swirl")
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
install.packages(plyr)
install.packages("plyr")
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class,c("sex","class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package == "lubridate")
help(package == lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wkday(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <-ymd("1989-05-17")
my_date
clasS(my_date)
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(now())
this_moment <- update(this_moment, hours =10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours =17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
getwd()
data <- read.csv("Aqua7_DB_20151014.csv", sep = ";", na.strings = c("NA", "NaN", ""))
str(data)
tail(data[,c(-4)])
tail(data[,c(-4)], 30)
tail(data[,c(-4)], 50)
data[c(1350:1375),c(-4)])
data[c(1350:1375),c(-4)]
data[c(1340:1355),c(-4)]
data[c(1330:1375),c(-4)]
data[c(1310:1355),c(-4)]
data[c(1280:1325),c(-4)]
data[c(1250:1325),c(-4)]
data[c(1200:1250),c(-4)]
data[c(1200:1270),c(-4)]
data[c(1100:1200),c(-4)]
data[c(1050:1110),c(-4)]
getwd()
setwd("C:/Users/acoelho/My Documents/GitHub/RepData_PeerAssessment1")
getwd()
if (!file.exists("./activity.csv")) {
if (!file.exists("./repdata-data-activity.zip")) {
fURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fURL,destfile="repdata-data-activity.zip")
}
unzip("./repdata-data-activity.zip")
}
data <- read.csv("activity.csv")
str(data)
?mean
?aggregate
aggregate(steps ~ date, data, mean(na.rm=TRUE))
aggregate(steps ~ date, data, mean)
aggregate(steps ~ date, data, sum)
totalStepsPerDay <- aggregate(steps ~ date, data, sum)
hist(totalStepsPerDay)
hist(totalStepsPerDay$steps)
mean(totalStepsPerDay$steps)
median(totalStepsPerDay$steps)
str(data)
heaD(data$interval, 30)
head(data$interval, 30)
head(data$interval, 100)
head(data$interval, 1000)
aggregate(steps ~ interval, data, mean)
?plot
avgStepsByInterval <- aggregate(steps ~ interval, data, mean)
plot(avgStepsByInterval$interval, avgStepsByInterval$steps, type = "l" )
max(avgStepsByInterval$steps)
avgStepsByInterval[,interval == max(avgStepsByInterval$steps)]
avgStepsByInterval[,"interval" == max(avgStepsByInterval$steps)]
avgStepsByInterval["interval" == max(avgStepsByInterval$steps),]
avgStepsByInterval[,"interval" == max(avgStepsByInterval$steps)]
avgStepsByInterval[interval" == max(avgStepsByInterval$steps),]
avgStepsByInterval[avgStepsByInterval$max == max(avgStepsByInterval$steps),]
avgStepsByInterval[avgStepsByInterval$steps == max(avgStepsByInterval$steps),]
avgStepsByInterval[avgStepsByInterval$steps == max(avgStepsByInterval$steps),][,"interval"]
complete.cases(data)
sum(complete.cases(data))
data[!complete.cases(data),]
incompleteCases <- data[!complete.cases(data),]
length(incompleteCases$steps)
mutate
library(dplyr)
?mutate
!complete.cases(data)
library(lubridate)
?weekday
?weekdays
?lapply
?sapply
?lapply
?sapply
?lapply
tapply
?tapply
?sapply
?for
for (i in 1:nrow(activityFilled))
!complete.cases(data)
for (i in !complete.cases(data) {}
for (i in !complete.cases(data) {}
for (i in !complete.cases(data)) {}
filleData <- data
#replacing NAs with mean for that interval
for (i in !complete.cases(filleData)) {
filleData[i,"steps"] <- avgStepsByInterval[avgStepsByInterval$interval == filleData[i,"interval"],][,"steps"]
}
!complete.cases(filleData)
complete.cases(filleData)
?row_number
filleData
filleData$steps
length(filleData$steps_
)
length(filleData$steps)
filleData[17668,]
data <- read.csv("activity.csv")
filleData <- data
for (i in 1:length(filleData$steps)) {
if (is.na(filleData[i,"steps"])) {
filleData[i,"steps"] <- avgStepsByInterval[avgStepsByInterval$interval == filleData[i,"interval"],][,"steps"]
}
}
complete.cases(data)
sum(complete.cases(data))
sum(complete.cases(filleData))
head(data)
head(filleData)
avgStepsByInterval[,"interval" == 0]
avgStepsByInterval["interval" == 0,]
head(avgStepsByInterval)
avgStepsByInterval["interval" == 0,]
avgStepsByInterval["interval" < 5,]
str(avgStepsByInterval)
avgStepsByInterval["interval" < 5]
avgStepsByInterval[avgStepsByInterval$interval < 5,]
filleData[filleData$interval == 0,]
data[data$interval == 0,]
totalStepsPerDayFil <- aggregate(steps ~ date, filleData, sum)
hist(totalStepsPerDayFil$steps)
mean(totalStepsPerDayFil$steps)
median(totalStepsPerDayFil$steps)
totalStepsPerDay <- aggregate(steps ~ date, data, sum)
hist(totalStepsPerDay$steps)
mean(totalStepsPerDay$steps)
median(totalStepsPerDay$steps)
library(chron)
install.packages(chron)
install.packages("chron")
library(chron)
?require
?is.weekend()
is.weekend(filleData$date)
mutate(filleData, IsWeekend = is.weekend(date))
mutate(filleData, IsWeekend = gsub("FALSE", "Weekday", gsub("TRUE", "Weekend", is.weekend(date)))
mutate(filleData, IsWeekend = gsub("FALSE", "Weekday", gsub("TRUE", "Weekend", is.weekend(date))))
wkndData <- mutate(filleData, IsWeekend = gsub("FALSE", "Weekday", gsub("TRUE", "Weekend", is.weekend(date))))
str(wkndData)
aggregate(steps ~ IsWeekend + interval, wkndData, mean)
aggregate(steps ~ interval + IsWeekend, wkndData, mean)
